import numpy as np
import pandas as pd

"""
Inladen van data: gendescriptions als dictionary met keys de ID's en de
bij horende beschrijving als values
"""
def loadData(GenDescription):
    """
    Python code en txt files moeten in deze map gelocaliseerd zijn.
    Laad data in dat nodig is voor fase 3 de beschrijving van de genen.
    Input: textbestand GenDescription
    Output: Dictionary
    """
    #lees txt bestanden
    infileGen = open(GenDescription)
    lines = infileGen.read().splitlines()
    infileGen.close()
    
    locsID=list(range(0,len(lines),3))  #list of keys positions
    IDsGen=[]
    for locID in locsID:
        #add ID's to list
        ID=lines[locID]
        IDsGen.append(ID)
    
    locsDescription=list(range(1,len(lines),3))    #list of values positions
    descriptionGen=[]
    for locDescription in locsDescription:
        #add descriptions to list
        description=lines[locDescription]
        descriptionGen.append(description)
    
    dictGenDes = {}
    for ID in IDsGen:
        dictGenDes[ID]=descriptionGen[IDsGen.index(ID)]
    
    return dictGenDes

def resultladen(tekstbestand):
    #input: resultaten clusteren .txt
    #output: dictionary met CloneID en clusternummer
    
    #open het tekstbestand, lees het regel voor regel in en sluit het
    f = open(tekstbestand, "r")
    clusterresultlines = f.read().splitlines()
    f.close()
    
    #maak een lege dictionary aan
    clusterresultdict = {}
    #iedere regel wordt gesplitst op 3 spaties, zodat ze als key:value aan de dictionary toegevoegd kunnen worden
    for i in clusterresultlines:
        linesplit= i.split("   ")
        clusterresultdict[linesplit[0]]=linesplit[1]
    
    return clusterresultdict

    
def Telwoorden(dict):
    #input: dictionary met CodeID's en descriptions
    #output: dictionary met woord en hoe vaak het in de beschrijvingen voorkomt
    
    #maak een lijst met de descriptions
    lijst = list(dict.values())
    #maak een lege dictionary, dit wordt de output
    woordendict = {}
    #voor elke beschrijving wordt een lijst van woorden gemaakt
    
    for beschrijving in lijst:
        beschrijving = beschrijving.split(" ")
        
        #overbodige entries en tekens worden verwijderd
        if "" in beschrijving:
            beschrijving.remove("")
        for woord in beschrijving:
            beschrijving[beschrijving.index(woord)] = woord.strip("\(")
        for woord in beschrijving:
            beschrijving[beschrijving.index(woord)] = woord.strip(",")
        for woord in beschrijving:
            beschrijving[beschrijving.index(woord)] = woord.strip("\)")
                
        #voor elk woord wordt 1 opgeteld bij het aantal keer dat het is voorgekomen in de woordendict   
        for woord in beschrijving:
            if woord in woordendict.keys():
                woordendict[woord] +=1
            else: #als het woord nog niet in woordendict staat, wordt het toegevoegd met value 1
                woordendict[woord] = 1
                
    return woordendict


            
def WoordenClusters(dictGenDes,clusterresultdict):
    #voeg cluster nummers toe aan gen descripties voor gelijke CloneID's
    df_clusterresult = pd.DataFrame(list(clusterresultdict.items()), columns = ['CloneID','cluster_nummer'])
    df_genDes = pd.DataFrame(list(dictGenDes.items()), columns = ['CloneID','beschrijving'])
    df_merge = pd.merge(df_genDes, df_clusterresult, how='inner', on='CloneID')
    #maak van de cluster nummers integers
    df_merge['cluster_nummer']=pd.to_numeric(df_merge['cluster_nummer'])
    
    
    #creÃ«ert een lijst met lijsten bestaande uit de woorden in de gen beschrijvingen per cluster
    alle_woord_per_cluster = [] #lege lijst voor bovenstaande benoemde lijst
    
    alle_woorden = [] #lege lijst waar alle woorden inkomen

    
    for cluster_nr in range(1,int(df_merge['cluster_nummer'].max())+1):  #for loop met clusternummer
        df_per_cluster = df_merge[df_merge['cluster_nummer']==cluster_nr]#dataframe per cluster met beschrijving
        des_per_cluster = df_per_cluster['beschrijving'].tolist()   #zet kolom met beschrijving om in lijst

        woord_per_cluster = []  #lege lijst voor alle woorden per cluster
        
        for beschrijving in des_per_cluster:
            beschrijving = beschrijving.split(" ")
        
            #overbodige entries en tekens worden verwijderd
            if "" in beschrijving:
                beschrijving.remove("")
            for woord in beschrijving:
                beschrijving[beschrijving.index(woord)] = woord.strip("\(")
            for woord in beschrijving:
                beschrijving[beschrijving.index(woord)] = woord.strip(",")
            for woord in beschrijving:
                beschrijving[beschrijving.index(woord)] = woord.strip("\)")
            #beschrijving is de description van de gen gesplit in woorden in een lijst
            
            #lengt woord_per_cluster aan met nieuwe woorden van die cluster
            woord_per_cluster.extend(beschrijving)
            
            #voegt elk woord toe aan alle_woorden                
            alle_woorden.extend(beschrijving)
            
        #voegt lijst met woorden per cluster toe aan alle_woord_per_cluster
        alle_woord_per_cluster.append(woord_per_cluster)
    
    voorkomen_woorden_cluster_dict = {} #lege dictionary waar value de lijst met voorkomen woorden per cluster inkomen
    
    for w in alle_woorden:  #for loop met alle woorden in de beschrijvingen
        voorkomen_woorden_cluster_lijst = []    #lege lijst waar aantal voorkomen van woorden per cluster in komen
        for index_cluster in range(df_merge['cluster_nummer'].max()):  #for loop met index van cluster
            telling = alle_woord_per_cluster[index_cluster].count(w)    #aantal voorkomen van woord in die cluster
            voorkomen_woorden_cluster_lijst.append(telling)  #voorkomen van woord in cluster wordt toegevoegd aan de lijst
        voorkomen_woorden_cluster_dict[w] = voorkomen_woorden_cluster_lijst  #uiteindelijke dictionary wordt gemaakt
        
    for woord in voorkomen_woorden_cluster_dict:
        clusterlijst = []
        for cluster in voorkomen_woorden_cluster_dict[woord]:
            if cluster == 1:
                if voorkomen_woorden_cluster_dict[woord].index(cluster)+1 not in clusterlijst:
                    clusterlijst.append(voorkomen_woorden_cluster_dict[woord].index(cluster)+1)
                    
        if clusterlijst == []:
            clusterlijst= [0]
        voorkomen_woorden_cluster_dict[woord]=clusterlijst
            
        
    return voorkomen_woorden_cluster_dict
    
    
    

            



clusterresult = resultladen("Voorbeeld_clusterresult.txt")
dictGenDes = loadData('GenDescription.txt')
dictGenDes2 = loadData('GenDescription2.txt')

print(WoordenClusters(dictGenDes2,clusterresult))
