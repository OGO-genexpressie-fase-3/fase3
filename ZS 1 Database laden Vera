#voorbeeld_clusterdata.txt
#voorbeeld_clusterresults.txt

import numpy as np
import pandas as pd

# next command ensures that plots appear inside the notebook
import matplotlib as mpl
import matplotlib.pyplot as plt
import seaborn as sns  # also improves the look of plots
sns.set()
plt.rcParams['figure.figsize'] = 10, 5  # default hor./vert. size of plots, in inches
plt.rcParams['lines.markeredgewidth'] = 1  # to fix issue with seaborn box plots; needed after import seaborn

#from sklearn.linear_model import LinearRegression  # for linear regression
#from sklearn.cluster import KMeans  # for clustering
#from sklearn.tree import DecisionTreeClassifier  # for decision tree mining
#from sklearn.metrics import accuracy_score, confusion_matrix, mean_squared_error
#from sklearn.model_selection import train_test_split
#from treeviz import tree_print  # to print decision tree


def dataladen(tekstbestand):
    
    f = open(tekstbestand, "r")

    #voorbeeld_clusterdata = pd.read_table(f)
    clusterdata = f.read()
    print(clusterdata)
    
def resultladen(tekstbestand):
    
    f = open(tekstbestand, "r")

    clusterresultlines = f.read().splitlines()
    f.close()
    
    #extract keys
    locsID=list(range(0,len(clusterresultlines),3))  #list of keys positions
    IDsresult=[]
    for locID in locsID:
        #add ID's to list
        ID=clusterresultlines[locID]
        IDsresult.append(ID)
    
    locsDescription=list(range(1,len(clusterresultlines),3))    #list of values positions
    descriptionresult=[]
    for locDescription in locsDescription:
        #add descriptions to list
        description=clusterresultlines[locDescription]
        descriptionresult.append(description)
    
    tuplePair = zip(IDsresult, descriptionresult) #voeg de lijsten bij elkaar toe als tuples
    dictGenDes = dict(tuplePair)  #maak dictionary van de ID's en hun beschrijving
    
    return dictGenDes
    print(dictGenDes)
    
dataladen("Voorbeeld_clusterdata.txt")
resultladen("Voorbeeld_clusterresult.txt")
